// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab04;

namespace lab04.Migrations
{
    [DbContext(typeof(AzureStorageEmulatorDb59Context))]
    partial class AzureStorageEmulatorDb59ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("lab04.Account", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<byte[]>("BlobServiceSettings");

                    b.Property<byte[]>("QueueServiceSettings");

                    b.Property<byte[]>("SecondaryKey")
                        .HasMaxLength(256);

                    b.Property<bool?>("SecondaryReadEnabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<byte[]>("SecretKey")
                        .HasMaxLength(256);

                    b.Property<byte[]>("TableServiceSettings");

                    b.HasKey("Name");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("lab04.Blob", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("ContainerName")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("BlobName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("VersionTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("('9999-12-31T23:59:59.997')");

                    b.Property<int?>("BlobType");

                    b.Property<long?>("ContentCrc64");

                    b.Property<long>("ContentLength");

                    b.Property<byte[]>("ContentMd5")
                        .HasColumnName("ContentMD5")
                        .HasMaxLength(16);

                    b.Property<string>("ContentType")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("DirectoryPath")
                        .HasMaxLength(260);

                    b.Property<string>("FileName")
                        .HasMaxLength(260);

                    b.Property<string>("GenerationId")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<bool?>("HasBlock");

                    b.Property<bool?>("IsCommitted");

                    b.Property<bool?>("IsIncrementalCopy");

                    b.Property<bool?>("IsLeaseOp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LastModificationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<long?>("LeaseDuration")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LeaseEndTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("LeaseId");

                    b.Property<int?>("LeaseState")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("MaxSize");

                    b.Property<byte[]>("Metadata");

                    b.Property<long?>("SequenceNumber");

                    b.Property<byte[]>("ServiceMetadata");

                    b.Property<int>("SnapshotCount");

                    b.Property<int?>("UncommittedBlockIdLength")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("AccountName", "ContainerName", "BlobName", "VersionTimestamp");

                    b.ToTable("Blob");
                });

            modelBuilder.Entity("lab04.BlobContainer", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("ContainerName")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<bool?>("IsLeaseOp")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("LastModificationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<long?>("LeaseDuration")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LeaseEndTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("LeaseId");

                    b.Property<int?>("LeaseState")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Metadata");

                    b.Property<byte[]>("ServiceMetadata");

                    b.HasKey("AccountName", "ContainerName");

                    b.ToTable("BlobContainer");
                });

            modelBuilder.Entity("lab04.BlockData", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("ContainerName")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("BlobName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("VersionTimestamp")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCommitted");

                    b.Property<string>("BlockId")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("FilePath")
                        .HasMaxLength(260);

                    b.Property<long?>("Length");

                    b.Property<long>("StartOffset");

                    b.HasKey("AccountName", "ContainerName", "BlobName", "VersionTimestamp", "IsCommitted", "BlockId");

                    b.ToTable("BlockData");
                });

            modelBuilder.Entity("lab04.CommittedBlock", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("ContainerName")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("BlobName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("VersionTimestamp")
                        .HasColumnType("datetime");

                    b.Property<long>("Offset");

                    b.Property<string>("BlockId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<DateTime?>("BlockVersion")
                        .HasColumnType("datetime");

                    b.Property<long?>("Length");

                    b.HasKey("AccountName", "ContainerName", "BlobName", "VersionTimestamp", "Offset");

                    b.ToTable("CommittedBlock");
                });

            modelBuilder.Entity("lab04.CurrentPage", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("ContainerName")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("BlobName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("VersionTimestamp")
                        .HasColumnType("datetime");

                    b.Property<long>("StartOffset");

                    b.Property<long?>("EndOffset");

                    b.Property<int>("SnapshotCount");

                    b.HasKey("AccountName", "ContainerName", "BlobName", "VersionTimestamp", "StartOffset");

                    b.ToTable("CurrentPage");
                });

            modelBuilder.Entity("lab04.DeletedAccount", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime");

                    b.HasKey("Name");

                    b.ToTable("DeletedAccount");
                });

            modelBuilder.Entity("lab04.Page", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("ContainerName")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("BlobName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("VersionTimestamp")
                        .HasColumnType("datetime");

                    b.Property<long>("StartOffset");

                    b.Property<long?>("EndOffset");

                    b.Property<long?>("FileOffset");

                    b.Property<int>("SnapshotCount");

                    b.HasKey("AccountName", "ContainerName", "BlobName", "VersionTimestamp", "StartOffset");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("lab04.QueueContainer", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("QueueName")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastModificationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<byte[]>("Metadata");

                    b.Property<byte[]>("ServiceMetadata");

                    b.HasKey("AccountName", "QueueName");

                    b.ToTable("QueueContainer");
                });

            modelBuilder.Entity("lab04.QueueMessage", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("QueueName")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<DateTime>("VisibilityStartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("MessageId");

                    b.Property<byte[]>("Data")
                        .IsRequired();

                    b.Property<int?>("DequeueCount");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("InsertionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("AccountName", "QueueName", "VisibilityStartTime", "MessageId");

                    b.ToTable("QueueMessage");
                });

            modelBuilder.Entity("lab04.TableContainer", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("TableName")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("CasePreservedTableName")
                        .IsRequired()
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastModificationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<byte[]>("Metadata");

                    b.Property<byte[]>("ServiceMetadata");

                    b.HasKey("AccountName", "TableName");

                    b.ToTable("TableContainer");
                });

            modelBuilder.Entity("lab04.TableRow", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("TableName")
                        .HasMaxLength(63)
                        .IsUnicode(false);

                    b.Property<string>("PartitionKey")
                        .HasMaxLength(256);

                    b.Property<string>("RowKey")
                        .HasMaxLength(256);

                    b.Property<string>("Data")
                        .HasColumnType("xml");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("AccountName", "TableName", "PartitionKey", "RowKey");

                    b.ToTable("TableRow");
                });

            modelBuilder.Entity("lab04.Blob", b =>
                {
                    b.HasOne("lab04.BlobContainer", "BlobContainer")
                        .WithMany("Blob")
                        .HasForeignKey("AccountName", "ContainerName")
                        .HasConstraintName("BlobContainer_Blob")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("lab04.BlobContainer", b =>
                {
                    b.HasOne("lab04.Account", "AccountNameNavigation")
                        .WithMany("BlobContainer")
                        .HasForeignKey("AccountName")
                        .HasConstraintName("Account_BlobContainer")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("lab04.CommittedBlock", b =>
                {
                    b.HasOne("lab04.Blob", "Blob")
                        .WithMany("CommittedBlock")
                        .HasForeignKey("AccountName", "ContainerName", "BlobName", "VersionTimestamp")
                        .HasConstraintName("BlockBlob_CommittedBlock")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("lab04.CurrentPage", b =>
                {
                    b.HasOne("lab04.Blob", "Blob")
                        .WithMany("CurrentPage")
                        .HasForeignKey("AccountName", "ContainerName", "BlobName", "VersionTimestamp")
                        .HasConstraintName("PageBlob_CurrentPage")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("lab04.Page", b =>
                {
                    b.HasOne("lab04.Blob", "Blob")
                        .WithMany("Page")
                        .HasForeignKey("AccountName", "ContainerName", "BlobName", "VersionTimestamp")
                        .HasConstraintName("PageBlob_Page")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("lab04.QueueContainer", b =>
                {
                    b.HasOne("lab04.Account", "AccountNameNavigation")
                        .WithMany("QueueContainer")
                        .HasForeignKey("AccountName")
                        .HasConstraintName("Account_QueueContainer")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("lab04.QueueMessage", b =>
                {
                    b.HasOne("lab04.QueueContainer", "QueueContainer")
                        .WithMany("QueueMessage")
                        .HasForeignKey("AccountName", "QueueName")
                        .HasConstraintName("QueueContainer_QueueMessage")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("lab04.TableContainer", b =>
                {
                    b.HasOne("lab04.Account", "AccountNameNavigation")
                        .WithMany("TableContainer")
                        .HasForeignKey("AccountName")
                        .HasConstraintName("Account_TableContainer")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("lab04.TableRow", b =>
                {
                    b.HasOne("lab04.TableContainer", "TableContainer")
                        .WithMany("TableRow")
                        .HasForeignKey("AccountName", "TableName")
                        .HasConstraintName("TableContainer_TableRow")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
